{
    "R1": "import io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.request.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.json.Json\n\n\n@Serializable\ndata class Product(val id: Int, val name: String, val price: Double)\n\n\nval products = mutableListOf<Product>(\n    Product(1, \"Laptop\", 1200.00),\n    Product(2, \"Mouse\", 25.00)\n)\n\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/products\") {\n                call.respond(HttpStatusCode.OK, products)\n            }\n\n\n            get(\"/products/{id}\") {\n                val id = call.parameters[\"id\"]?.toIntOrNull()\n                if (id == null) {\n                    call.respond(HttpStatusCode.BadRequest, \"Invalid product ID\")\n                    return@get\n                }\n                val product = products.find { it.id == id }\n                if (product != null) {\n                    call.respond(HttpStatusCode.OK, product)\n                } else {\n                    call.respond(HttpStatusCode.NotFound, \"Product not found\")\n                }\n            }\n\n\n            post(\"/products\") {\n                try {\n                    val product = call.receive<Product>()\n                    products.add(product)\n                    call.respond(HttpStatusCode.Created, product)\n                } catch (e: Exception) {\n                    call.respond(HttpStatusCode.BadRequest, \"Invalid product data\")\n                }\n            }\n        }\n    }.start(wait = true)\n}",
    "R2": "import kotlinx.serialization.Serializable\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.server.request.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\n@Serializable\ndata class Product(val id: Int, val name: String, val price: Double)\n\n\nval products = mutableListOf<Product>(\n    Product(1, \"Laptop\", 1200.00),\n    Product(2, \"Mouse\", 25.00)\n)\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ContentNegotiation) {\n            json()\n        }\n        routing {\n            // Will add GET and POST endpoints here in the next steps\n        }\n    }.start(wait = true)\n}"
}