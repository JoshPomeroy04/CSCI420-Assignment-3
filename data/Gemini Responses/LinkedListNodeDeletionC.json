{
    "R1": "#include <stdio.h>\n#include <stdlib.h>\n\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\n\nvoid deleteNode(struct Node **head, int key) {\n    struct Node *current = *head;\n    struct Node *prev = NULL;\n\n\n    // Case 1: Empty list\n    if (*head == NULL) {\n        return;\n    }\n\n\n    // Case 2: Key is in the head node\n    if (current != NULL && current->data == key) {\n        *head = current->next; // Changed head\n        free(current);         // Free old head\n        return;\n    }\n\n\n    // Case 3: Search for the key in the list\n    while (current != NULL && current->data != key) {\n        prev = current;\n        current = current->next;\n    }\n\n\n    // Case 4: Key not found\n    if (current == NULL) {\n        return;\n    }\n\n\n    // Case 5: Key found - Unlink the node from the list\n    prev->next = current->next;\n\n\n    // Free the memory of the deleted node\n    free(current);\n}\n\n\n// Helper function to print the linked list (for testing)\nvoid printList(struct Node *n) {\n    while (n != NULL) {\n        printf(\"%d \", n->data);\n        n = n->next;\n    }\n    printf(\"\\n\");\n}\n\n\n// Helper function to create a new node (for testing)\nstruct Node* newNode(int data) {\n    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = NULL;\n    return new_node;\n}\n\n\nint main() {\n    // Example usage:\n    struct Node* head = newNode(1);\n    head->next = newNode(2);\n    head->next->next = newNode(3);\n    head->next->next->next = newNode(4);\n\n\n    printf(\"Original list: \");\n    printList(head);\n\n\n    deleteNode(&head, 3);\n    printf(\"List after deleting 3: \");\n    printList(head);\n\n\n    deleteNode(&head, 1);\n    printf(\"List after deleting 1: \");\n    printList(head);\n\n\n    deleteNode(&head, 5); // Key not present\n    printf(\"List after deleting 5 (not found): \");\n    printList(head);\n\n\n    deleteNode(&head, 4);\n    printf(\"List after deleting 4: \");\n    printList(head);\n\n\n    deleteNode(&head, 2);\n    printf(\"List after deleting 2 (last remaining): \");\n    printList(head);\n\n\n    deleteNode(&head, 2); // Deleting from an empty list\n    printf(\"List after deleting 2 from empty list: \");\n    printList(head);\n\n\n    return 0;\n}",
    "R2": "#include <stdio.h>\n#include <stdlib.h>\n\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\n\nvoid deleteNode(struct Node **head, int key) {\n    struct Node *current = *head;\n    struct Node *prev = NULL;\n\n\n    // Case 1: Empty list\n    if (*head == NULL) {\n        return;\n    }\n\n\n    // Case 2: Key is in the head node\n    if (current != NULL && current->data == key) {\n        *head = current->next; // Changed head\n        free(current);         // Free old head\n        return;\n    }\n\n\n    // Case 3: Search for the key in the list\n    while (current != NULL && current->data != key) {\n        prev = current;\n        current = current->next;\n    }\n\n\n    // Case 4: Key not found\n    if (current == NULL) {\n        return;\n    }\n\n\n    // Case 5: Key found - Unlink the node from the list\n    prev->next = current->next;\n\n\n    // Free the memory of the deleted node\n    free(current);\n}\n\n\n// Helper function to print the linked list (for testing)\nvoid printList(struct Node *n) {\n    while (n != NULL) {\n        printf(\"%d \", n->data);\n        n = n->next;\n    }\n    printf(\"\\n\");\n}\n\n\n// Helper function to create a new node (for testing)\nstruct Node* newNode(int data) {\n    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));\n    new_node->data = data;\n    new_node->next = NULL;\n    return new_node;\n}\n\n\n// Helper function to create the linked list from an array (for testing)\nvoid createList(struct Node** head, int arr[], int n) {\n    *head = NULL;\n    struct Node* temp = NULL;\n\n\n    for (int i = 0; i < n; i++) {\n        struct Node* new_node = newNode(arr[i]);\n        if (*head == NULL) {\n            *head = new_node;\n            temp = *head;\n        } else {\n            temp->next = new_node;\n            temp = new_node;\n        }\n    }\n}\n\n\nint main() {\n    // Example 1: Delete 3\n    struct Node* head1 = NULL;\n    int arr1[] = {3, 2, 5, 7};\n    int n1 = sizeof(arr1) / sizeof(arr1[0]);\n    createList(&head1, arr1, n1);\n\n\n    printf(\"Original List: \");\n    printList(head1);\n\n\n    int keyToDelete1 = 3;\n    deleteNode(&head1, keyToDelete1);\n    printf(\"List after deleting %d: \", keyToDelete1);\n    printList(head1);\n\n\n    // Example 2: Delete 5\n    struct Node* head2 = NULL;\n    int arr2[] = {3, 2, 5, 7};\n    int n2 = sizeof(arr2) / sizeof(arr2[0]);\n    createList(&head2, arr2, n2);\n\n\n    printf(\"\\nOriginal List: \");\n    printList(head2);\n\n\n    int keyToDelete2 = 5;\n    deleteNode(&head2, keyToDelete2);\n    printf(\"List after deleting %d: \", keyToDelete2);\n    printList(head2);\n\n\n    // Remember to free the allocated memory in a real application\n    // This simplified example omits explicit memory freeing for brevity in demonstration.\n\n\n    return 0;\n}"
}